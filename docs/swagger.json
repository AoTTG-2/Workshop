{
    "swagger": "2.0",
    "info": {
        "title": "Workshop Service",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/comments": {
            "get": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Returns a list of post's comments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts",
                    "Comments"
                ],
                "summary": "Get Comments",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order by creation time",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of comments per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of comments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/workshop.Comment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request – invalid payload",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Add a comment to a post. Only authorized users with role 'USER' can add a comment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Add Comment",
                "parameters": [
                    {
                        "description": "Request payload with comment data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.AddCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment created successfully",
                        "schema": {
                            "$ref": "#/definitions/workshop.Comment"
                        }
                    },
                    "400": {
                        "description": "Bad Request – invalid input payload",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – insufficient user rights",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found – associated post not found",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            }
        },
        "/comments/{commentID}": {
            "put": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Update an existing comment. Only authorized users with role 'USER' can update their comments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Update Comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID",
                        "name": "commentID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request payload with updated comment data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment updated successfully",
                        "schema": {
                            "$ref": "#/definitions/workshop.Comment"
                        }
                    },
                    "400": {
                        "description": "Bad Request – invalid input payload",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – insufficient user rights",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found – comment not found",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Delete an existing comment. Only authorized users with role 'USER' can delete their comments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Delete Comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID",
                        "name": "commentID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Comment deleted successfully, no content returned"
                    },
                    "400": {
                        "description": "Bad Request – invalid input payload",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – insufficient user rights",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found – comment not found",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            }
        },
        "/moderation-actions": {
            "get": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Returns a list of moderation actions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moderation"
                ],
                "summary": "Get Moderation Actions",
                "parameters": [
                    {
                        "enum": [
                            "approve",
                            "decline"
                        ],
                        "type": "string",
                        "description": "Moderation action",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order by creation time",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of moderation actions per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of moderation actions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/workshop.ModerationAction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request – invalid payload",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – caller lacks post moderator permissions",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Returns a list of posts, filtered by the request parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get Posts List",
                "parameters": [
                    {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Search query",
                        "name": "search_query",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter to include only approved posts",
                        "name": "only_approved",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter to include declined posts. Requires 'POST_MODERATOR' role.",
                        "name": "show_declined",
                        "in": "query"
                    },
                    {
                        "maxLength": 10,
                        "minLength": 1,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Tags filter",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User ID for whom posts are retrieved. Requires 'IMPERSONATOR' role.",
                        "name": "for_user_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter to include only favorite posts",
                        "name": "only_favorites",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "upvoted",
                            "downvoted",
                            "voted",
                            "none"
                        ],
                        "type": "string",
                        "description": "Whether to show posts that user has rated",
                        "name": "rating_filter",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "popularity",
                            "best_rated",
                            "newest",
                            "recently_updated",
                            "most_discussed"
                        ],
                        "type": "string",
                        "description": "Sort type",
                        "name": "sort_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of posts per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of posts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/workshop.Post"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request – invalid filter parameters or conflicting filter options",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – insufficient permissions for specified filters",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Creates a new post. The caller must have the 'post creator' role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Create Post",
                "parameters": [
                    {
                        "description": "Request payload containing new post data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.CreatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Newly created post",
                        "schema": {
                            "$ref": "#/definitions/workshop.Post"
                        }
                    },
                    "400": {
                        "description": "Bad Request – invalid input data",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – insufficient permissions to create posts",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests – post creation limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            }
        },
        "/posts/{postID}": {
            "get": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Retrieves a single post by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID for whom posts are retrieved. Requires 'IMPERSONATOR' role",
                        "name": "for_user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post details",
                        "schema": {
                            "$ref": "#/definitions/workshop.Post"
                        }
                    },
                    "400": {
                        "description": "Bad Request – invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – insufficient permissions for specified filters",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found – post not found",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Updates an existing post.\nThe caller must have the 'POST_CREATOR' role and must be the owner of the post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Update Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request payload containing updated post data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated post details",
                        "schema": {
                            "$ref": "#/definitions/workshop.Post"
                        }
                    },
                    "400": {
                        "description": "Bad Request – invalid input data",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – insufficient permissions to update posts",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found – post not found",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed – the post is not owned by the user",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Deletes an existing post.\nThe caller must have the 'POST_CREATOR' role and must be the owner of the post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Delete Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request payload containing the identifier of the post to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.DeletePostRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success – the post was deleted successfully (no content returned)"
                    },
                    "400": {
                        "description": "Bad Request – invalid input data",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – insufficient permissions to delete posts",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found – post not found",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed – the post is not owned by the user",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            }
        },
        "/posts/{postID}/favorite": {
            "post": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Mark a post as favorite for the current user. Only authorized users with role 'USER' can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Favorites",
                    "Interactions"
                ],
                "summary": "Favorite Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success – post was successfully added to favorites (no content returned)"
                    },
                    "400": {
                        "description": "Bad Request – invalid input payload",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – only authorized users can favorite posts",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found – post not found",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "409": {
                        "description": "Conflict – post is already in favorites",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Removes a post from the current user's favorites. Only authorized users with role 'USER' can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Favorites",
                    "Interactions"
                ],
                "summary": "Unfavorite Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content – the post was successfully removed from favorites"
                    },
                    "400": {
                        "description": "Bad Request – invalid input payload",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – only authorized users can unfavorite posts",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found – post is not marked as favorite or does not exist\"\t//\t(рекомендуемый статус: 412 Precondition Failed, если статус отличается)",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            }
        },
        "/posts/{postID}/moderate": {
            "post": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Allows a user with the 'POST_MODERATOR' role to moderate a post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts",
                    "Moderation"
                ],
                "summary": "Moderate Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request payload containing moderation action and post identifier",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.ModeratePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success – the moderation action has been applied (no content returned)"
                    },
                    "400": {
                        "description": "Bad Request – invalid payload",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – caller lacks post moderator permissions",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            }
        },
        "/posts/{postID}/rate": {
            "post": {
                "security": [
                    {
                        "DebugUserRoles": []
                    },
                    {
                        "DebugUserID": []
                    }
                ],
                "description": "Allows an authorized user (role \"user\") to rate a post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts",
                    "Interactions"
                ],
                "summary": "Rate Post",
                "parameters": [
                    {
                        "description": "Request payload containing the post identifier and rating data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.RatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success – the post rating has been processed successfully (no content returned)"
                    },
                    "400": {
                        "description": "Bad Request – invalid input or payload",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden – only authorized users can rate posts",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found – the post was not found",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "409": {
                        "description": "Conflict – the post has already been rated by the user",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.APIError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controller.AddCommentRequest": {
            "type": "object",
            "required": [
                "content",
                "postID"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "maxLength": 4096,
                    "minLength": 1
                },
                "postID": {
                    "type": "integer"
                }
            }
        },
        "controller.CreatePostRequest": {
            "type": "object",
            "required": [
                "contents",
                "description",
                "title",
                "type"
            ],
            "properties": {
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "x-order": "0"
                },
                "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "minLength": 1,
                    "x-order": "1"
                },
                "preview_url": {
                    "type": "string",
                    "x-order": "2"
                },
                "type": {
                    "description": "TODO: Discuss Types, validation",
                    "type": "string",
                    "x-order": "3"
                },
                "tags": {
                    "description": "TODO: Discuss Limit",
                    "type": "array",
                    "maxItems": 10,
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "x-order": "4"
                },
                "contents": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "object",
                        "required": [
                            "data",
                            "type"
                        ],
                        "properties": {
                            "data": {
                                "type": "string",
                                "x-order": "0"
                            },
                            "type": {
                                "description": "TODO: VALIDATION",
                                "type": "string",
                                "x-order": "1"
                            },
                            "is_link": {
                                "type": "boolean",
                                "x-order": "2"
                            }
                        }
                    },
                    "x-order": "5"
                }
            }
        },
        "controller.DeletePostRequest": {
            "type": "object"
        },
        "controller.ModeratePostRequest": {
            "type": "object",
            "required": [
                "action"
            ],
            "properties": {
                "action": {
                    "enum": [
                        "approve",
                        "decline"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ModerationActionType"
                        }
                    ],
                    "x-order": "0"
                },
                "note": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "controller.RateAction": {
            "type": "string",
            "enum": [
                "upvote",
                "downvote",
                "retract"
            ],
            "x-enum-varnames": [
                "RateActionUpvote",
                "RateActionDownvote",
                "RateActionRetract"
            ]
        },
        "controller.RatePostRequest": {
            "type": "object",
            "required": [
                "rating"
            ],
            "properties": {
                "rating": {
                    "enum": [
                        "upvote",
                        "downvote",
                        "retract"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/controller.RateAction"
                        }
                    ]
                }
            }
        },
        "controller.UpdateCommentRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "maxLength": 4096,
                    "minLength": 1
                }
            }
        },
        "controller.UpdatePostRequest": {
            "type": "object",
            "required": [
                "description",
                "title"
            ],
            "properties": {
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "x-order": "1"
                },
                "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "minLength": 1,
                    "x-order": "2"
                },
                "preview_url": {
                    "type": "string",
                    "x-order": "3"
                }
            }
        },
        "types.ModerationActionType": {
            "type": "string",
            "enum": [
                "approve",
                "decline"
            ],
            "x-enum-varnames": [
                "ModerationActionTypeApprove",
                "ModeratorActionTypeDecline"
            ]
        },
        "types.ModerationStatus": {
            "type": "string",
            "enum": [
                "approved",
                "declined",
                "pending"
            ],
            "x-enum-varnames": [
                "ModerationStatusApproved",
                "ModerationStatusDeclined",
                "ModerationStatusPending"
            ]
        },
        "types.RateType": {
            "type": "string",
            "enum": [
                "upvoted",
                "downvoted",
                "voted",
                "none"
            ],
            "x-enum-varnames": [
                "RateTypeUpvoted",
                "RateTypeDownvoted",
                "RateTypeVoted",
                "RateTypeNone"
            ]
        },
        "workshop.Comment": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "post_id": {
                    "type": "integer",
                    "x-order": "1"
                },
                "author_id": {
                    "type": "string",
                    "x-order": "2"
                },
                "content": {
                    "type": "string",
                    "x-order": "3"
                },
                "created_at": {
                    "type": "string",
                    "x-order": "4"
                },
                "updated_at": {
                    "type": "string",
                    "x-order": "5"
                }
            }
        },
        "workshop.ModerationAction": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "post": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/workshop.Post"
                        }
                    ],
                    "x-order": "1"
                },
                "moderator_id": {
                    "type": "string",
                    "x-order": "2"
                },
                "action": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ModerationActionType"
                        }
                    ],
                    "x-order": "3"
                },
                "note": {
                    "type": "string",
                    "x-order": "4"
                },
                "created_at": {
                    "type": "string",
                    "x-order": "5"
                }
            }
        },
        "workshop.Post": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "title": {
                    "type": "string",
                    "x-order": "1"
                },
                "interaction_data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/workshop.PostInteractionData"
                        }
                    ],
                    "x-order": "10"
                },
                "rating": {
                    "type": "integer",
                    "x-order": "11"
                },
                "comments_count": {
                    "type": "integer",
                    "x-order": "12"
                },
                "favorites_count": {
                    "type": "integer",
                    "x-order": "13"
                },
                "description": {
                    "type": "string",
                    "x-order": "2"
                },
                "preview_url": {
                    "type": "string",
                    "x-order": "3"
                },
                "post_type": {
                    "type": "string",
                    "x-order": "4"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-order": "5"
                },
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workshop.PostContent"
                    },
                    "x-order": "6"
                },
                "created_at": {
                    "type": "string",
                    "x-order": "7"
                },
                "updated_at": {
                    "type": "string",
                    "x-order": "8"
                },
                "moderation_data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/workshop.PostModerationData"
                        }
                    ],
                    "x-order": "9"
                }
            }
        },
        "workshop.PostContent": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "content_type": {
                    "type": "string",
                    "x-order": "1"
                },
                "content_data": {
                    "type": "string",
                    "x-order": "2"
                },
                "is_link": {
                    "type": "boolean",
                    "x-order": "3"
                }
            }
        },
        "workshop.PostInteractionData": {
            "type": "object",
            "properties": {
                "is_favorite": {
                    "type": "boolean",
                    "x-order": "0"
                },
                "vote": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.RateType"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "workshop.PostModerationData": {
            "type": "object",
            "properties": {
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ModerationStatus"
                        }
                    ],
                    "x-order": "0"
                },
                "note": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        }
    },
    "securityDefinitions": {
        "DebugUserID": {
            "description": "Force user ID if debug mode is enabled. Required if Debug User Roles is provided.",
            "type": "apiKey",
            "name": "X-Debug-User-ID",
            "in": "header"
        },
        "DebugUserRoles": {
            "description": "Force user roles if debug mode is enabled. Split by comma ',' for multiple roles.",
            "type": "apiKey",
            "name": "X-Debug-User-Roles",
            "in": "header"
        }
    }
}